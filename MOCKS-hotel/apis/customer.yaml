openapi: 3.0.2
info:
  title: Customer API
  version: 1.0
  description: |-
    API for managing hotel customers. Allows registration, update, lookup,
    and deletion of customer personal data.
  contact:
    name: Francesco Cosimo Mazzitelli

servers:
  - url: http://localhost:8585/rest/Customer+API/1.0
    description: Mock server for customer service

components:
  schemas:
    ResponseStatus:
      type: object
      properties:
        status:
          type: string
        httpCode:
          type: integer
        message:
          type: string
      required:
        - status
        - httpCode
        - message

    Customer:
      allOf:
        - $ref: '#/components/schemas/NewCustomer'
        - type: object
          properties:
            id:
              type: integer
              format: int64
              description: Unique customer identifier
          required:
            - id

    NewCustomer:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        dateOfBirth:
          type: string
          format: date
        documentNumber:
          type: string
          description: Passport or ID card number
      required:
        - firstName
        - lastName
        - email

paths:
  /health:
    get:
      description: Service health check
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
              examples:
                healthy:
                  value: {}

  /customers:
    get:
      description: Retrieve list of all registered customers
      responses:
        "200":
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
              examples:
                list:
                  value:
                    - id: 1
                      firstName: Mario
                      lastName: Rossi
                      email: mario.rossi@example.com
                      phone: "+39061234567"
                      dateOfBirth: "1980-05-12"
                      documentNumber: "XH1234567"

    post:
      description: Register a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomer'
            examples:
              new_customer:
                value:
                  firstName: Mario
                  lastName: Rossi
                  email: mario.rossi@example.com
                  phone: "+39061234567"
                  dateOfBirth: "1980-05-12"
                  documentNumber: "XH1234567"
      responses:
        "201":
          description: Customer registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                created:
                  value:
                    id: 1
                    firstName: Mario
                    lastName: Rossi
                    email: mario.rossi@example.com
                    phone: "+39061234567"
                    dateOfBirth: "1980-05-12"
                    documentNumber: "XH1234567"

  /customers/{id}:
    get:
      description: Get customer details by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          examples:
            customer_1:
              value: 1 
      responses:
        "200":
          description: Customer data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                customer_1:
                  value:
                    id: 1
                    firstName: Mario
                    lastName: Rossi
                    email: mario.rossi@example.com
                    phone: "+39061234567"
                    dateOfBirth: "1980-05-12"
                    documentNumber: "XH1234567"
        "404":
          description: Customer not found

    put:
      description: Update customer information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          examples:
            updated:
              value: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomer'
            examples:
              updated_customer:
                value:
                  firstName: Mario
                  lastName: Rossi
                  email: mario.rossi@example.com
                  phone: "+39061234567"
                  dateOfBirth: "1980-05-12"
                  documentNumber: "XH1234567"
      responses:
        "200":
          description: Customer updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                updated:
                  value:
                    id: 1
                    firstName: Mario
                    lastName: Rossi
                    email: mario.rossi@example.com
                    phone: "+39061234567"
                    dateOfBirth: "1980-05-12"
                    documentNumber: "XH1234567"

    delete:
      description: Delete a customer by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          examples:
            deleted_customer:
              value: 1
      responses:
        "204":
          description: Customer deleted successfully
          content:
            text/plain:
              examples:
                deleted_customer:
                  value: "Customer deleted successfully"
        "404":
          description: Customer not found

  /register:
    post:
      description: Register this service to the discovery system
      responses:
        "200":
          description: Registration success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                success:
                  value:
                    status: "success"
                    httpCode: 200
                    message: "Service registered successfully"
        "500":
          description: Registration error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                error:
                  value:
                    status: "error"
                    httpCode: 500
                    message: "Failed to register to Consul"
