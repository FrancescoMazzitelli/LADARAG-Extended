openapi: 3.0.2
info:
  title: Restaurant API
  version: 1.0
  description: |-
    Restaurant API for managing tables and areas in the restaurant. This service allows creation, retrieval, update, and deletion of restaurant areas,
    which can be booked via the Reservation service.
  contact:
    name: Francesco Cosimo Mazzitelli

servers:
  - url: http://localhost:8585/rest/Restaurant+API/1.0
    description: Mock server generated by Microcks

components:
  schemas:
    ResponseStatus:
      type: object
      properties:
        status:
          type: string
        httpCode:
          type: integer
        message:
          type: string
      required:
        - status
        - httpCode
        - message

    RestaurantArea:
      allOf:
        - $ref: '#/components/schemas/NewRestaurantArea'
        - properties:
            id:
              type: integer
              format: int64
              description: Unique identifier for the restaurant table or area
          required:
            - id

    NewRestaurantArea:
      type: object
      properties:
        name:
          type: string
          description: Name or label of the area or table
        seats:
          type: integer
          description: Number of seats available
        reserved:
          type: boolean
          description: Whether the area is currently reserved
        available:
          type: boolean
          description: Whether the area is available for reservation
        price:
          type: number
          format: float
          description: Optional price for booking the area
      required:
        - name
        - seats
        - reserved
        - available
        - price

paths:
  /health:
    get:
      description: Health check
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
              examples:
                healthy:
                  value: {}

  /restaurant:
    get:
      description: Get all restaurant areas or tables
      responses:
        "200":
          description: List of all restaurant areas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestaurantArea'
              examples:
                table_list:
                  value:
                    - id: 1
                      name: "Table 1"
                      seats: 4
                      reserved: false
                      available: true
                      price: 20.0
                    - id: 2
                      name: "VIP Room"
                      seats: 8
                      reserved: true
                      available: false
                      price: 100.0

    post:
      description: Create a new restaurant area
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRestaurantArea'
            examples:
              new_area:
                value:
                  name: "Garden Table"
                  seats: 2
                  reserved: false
                  available: true
                  price: 15.0
      responses:
        "201":
          description: Restaurant area created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantArea'
              examples:
                created:
                  value:
                    id: 301
                    name: "Garden Table"
                    seats: 2
                    reserved: false
                    available: true
                    price: 15.0

  /restaurant/{id}:
    get:
      description: Get a restaurant area by ID (used as referenceId in Reservation)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          examples:
            restaurant_1:
              value: 1
          description: Restaurant area ID
      responses:
        "200":
          description: Area details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantArea'
              examples:
                restaurant_1:
                  value:
                    id: 1
                    name: "Table 1"
                    seats: 4
                    reserved: false
                    available: true
                    price: 20.0
        "404":
          description: Restaurant area not found

    put:
      description: Update a restaurant area
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          examples:
            updated:
              value: 1
          description: Restaurant area ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRestaurantArea'
            examples:
              update_area:
                value:
                  name: "VIP Room"
                  seats: 10
                  reserved: true
                  available: false
                  price: 120.0
      responses:
        "200":
          description: Updated area
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantArea'
              examples:
                updated:
                  value:
                    id: 1
                    name: "VIP Room"
                    seats: 10
                    reserved: true
                    available: false
                    price: 120.0
        "404":
          description: Restaurant area not found

    delete:
      description: Delete a restaurant area
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          examples:
            restaurant_delete:
              value: 1
          description: Restaurant area ID
      responses:
        "204":
          description: Deleted successfully
          content:
            text/plain:
              examples:
                restaurant_delete:
                  value: "Restaurant area deleted successfully"
        "404":
          description: Restaurant area not found

  /register:
    post:
      description: Register the Restaurant service
      responses:
        "200":
          description: Registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                ok:
                  value:
                    status: "success"
                    httpCode: 200
                    message: "Service registered"
        "500":
          description: Registration failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                fail:
                  value:
                    status: "error"
                    httpCode: 500
                    message: "Unable to register to Consul"
