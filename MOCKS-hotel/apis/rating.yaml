openapi: 3.0.2
info:
  title: Rating API
  version: 1.0
  description: |-
    Rating API for managing room ratings. This API allows to create, retrieve, update, and delete ratings for hotel rooms.
  contact:
    name: Francesco Cosimo Mazzitelli

servers:
  - url: http://localhost:8585/rest/Rating+API/1.0
    description: Mock server generated by Microcks

components:
  schemas:
    ResponseStatus:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
        httpCode:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Detailed message
      required:
        - status
        - httpCode
        - message

    Rating:
      allOf:
        - $ref: '#/components/schemas/NewRating'
        - properties:
            id:
              type: integer
              format: int64
              description: Unique identifier for the rating
          required:
            - id

    NewRating:
      type: object
      properties:
        roomId:
          type: integer
          format: int64
          description: ID of the room being rated
        customerId:
          type: integer
          format: int64
          description: ID of the customer who gave the rating
        score:
          type: integer
          description: Rating score (1-5)
          minimum: 1
          maximum: 5
        comment:
          type: string
          description: Optional comment about the room
        date:
          type: string
          format: date-time
          description: Date and time when the rating was given
      required:
        - roomId
        - customerId
        - score
        - date

paths:
  /health:
    get:
      description: Health check
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
              examples:
                empty:
                  value: {}

  /register:
    post:
      description: Register this service to the discovery system
      responses:
        "200":
          description: Registration success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                success:
                  value:
                    status: "success"
                    httpCode: 200
                    message: "Service registered successfully"
        "500":
          description: Registration error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                error:
                  value:
                    status: "error"
                    httpCode: 500
                    message: "Failed to register to Consul"

  /ratings:
    get:
      description: Get all ratings, optionally filter by roomId
      parameters:
        - name: roomId
          in: query
          description: Filter ratings by Room ID
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of ratings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
              examples:
                example_ratings:
                  value:
                    - id: 1
                      roomId: 101
                      customerId: 10
                      score: 5
                      comment: "Excellent room, very clean."
                      date: "2025-08-20T14:30:00Z"
                    - id: 2
                      roomId: 101
                      customerId: 12
                      score: 4
                      comment: "Good room but noisy."
                      date: "2025-08-21T10:00:00Z"

    post:
      description: Create a new rating for a room
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRating'
            examples:
              new_rating:
                value:
                  roomId: 101
                  customerId: 10
                  score: 5
                  comment: "Loved the stay!"
                  date: "2025-08-22T09:00:00Z"
      responses:
        "201":
          description: Rating created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
              examples:
                created_rating:
                  value:
                    id: 3
                    roomId: 101
                    customerId: 10
                    score: 5
                    comment: "Loved the stay!"
                    date: "2025-08-22T09:00:00Z"

  /ratings/{id}:
    get:
      description: Get a rating by ID
      parameters:
        - name: id
          in: path
          description: Rating ID
          required: true
          schema:
            type: integer
            format: int64
          examples:
            rating_1:
              value: 1
      responses:
        "200":
          description: Rating found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
              examples:
                rating_1:
                  value:
                    id: 1
                    roomId: 101
                    customerId: 10
                    score: 5
                    comment: "Excellent room, very clean."
                    date: "2025-08-20T14:30:00Z"
        "404":
          description: Rating not found

    put:
      description: Update a rating by ID
      parameters:
        - name: id
          in: path
          description: Rating ID
          required: true
          schema:
            type: integer
            format: int64
          examples:
            updated_rating:
              value: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRating'
            examples:
              update_rating:
                value:
                  roomId: 101
                  customerId: 10
                  score: 4
                  comment: "Good, but had some noise."
                  date: "2025-08-21T11:00:00Z"
      responses:
        "200":
          description: Rating updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
              examples:
                updated_rating:
                  value:
                    id: 1
                    roomId: 101
                    customerId: 10
                    score: 4
                    comment: "Good, but had some noise."
                    date: "2025-08-21T11:00:00Z"

    delete:
      description: Delete a rating by ID
      parameters:
        - name: id
          in: path
          description: Rating ID
          required: true
          schema:
            type: integer
            format: int64
          examples:
            rating_delete:
              value: 1
      responses:
        "204":
          description: Rating deleted successfully
          content:
            text/plain:
              examples:
                rating_delete:
                  value: "Rating deleted successfully"
        "404":
          description: Rating not found
