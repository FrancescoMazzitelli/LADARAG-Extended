openapi: 3.0.2
info:
  title: Reservation API
  version: 1.0
  description: |-
    Reservation API for managing customer reservations. This API allows to create, retrieve, update, and delete reservations.
    It supports reservation types including hotel rooms, restaurant tables, and bar entries.
  contact:
    name: Francesco Cosimo Mazzitelli

servers:
  - url: http://localhost:8585/rest/Reservation+API/1.0
    description: Mock server generated by Microcks

components:
  schemas:
    ResponseStatus:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
        httpCode:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Detailed message
      required:
        - status
        - httpCode
        - message

    Reservation:
      allOf:
        - $ref: '#/components/schemas/NewReservation'
        - properties:
            id:
              format: int64
              type: integer
              description: Unique identifier for the reservation
          required:
            - id

    NewReservation:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
          description: ID of the customer (from Customer Service)
        customerName:
          type: string
          description: Name of the customer
        type:
          type: string
          enum: [room, restaurant, bar]
          description: Type of reservation
        referenceId:
          type: integer
          format: int64
          description: ID of the related Room, Restaurant Table or Bar Entry
        date:
          type: string
          format: date-time
          description: Date and time of the reservation
        paid:
          type: boolean
          description: Whether the reservation has been paid
      required:
        - customerId
        - customerName
        - type
        - referenceId
        - date
        - paid

paths:
  /health:
    get:
      description: Health check
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
              examples:
                empty:
                  value: {}

  /reservation:
    get:
      description: Get the list of all reservations
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
              examples:
                reservation_list:
                  value:
                    - id: 1
                      customerId: 10
                      customerName: Alice
                      type: room
                      referenceId: 101
                      date: "2025-09-01T15:00:00Z"
                      paid: true
                    - id: 2
                      customerId: 20
                      customerName: Bob
                      type: restaurant
                      referenceId: 201
                      date: "2025-09-02T19:30:00Z"
                      paid: false

    post:
      description: Create a new reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReservation'
            examples:
              new_reservation:
                value:
                  customerId: 30
                  customerName: Charlie
                  type: bar
                  referenceId: 301
                  date: "2025-09-05T21:00:00Z"
                  paid: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
              examples:
                created_reservation:
                  value:
                    id: 101
                    customerId: 30
                    customerName: Charlie
                    type: bar
                    referenceId: 301
                    date: "2025-09-05T21:00:00Z"
                    paid: false

  /reservation/{id}:
    get:
      description: Get a reservation by ID
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          examples:
            reservation_1:
              value: 1
          required: true
          description: Reservation ID
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
              examples:
                reservation_1:
                  value:
                    id: 1
                    customerId: 10
                    customerName: Alice
                    type: room
                    referenceId: 101
                    date: "2025-09-01T15:00:00Z"
                    paid: true
        "404":
          description: Reservation not found

    put:
      description: Update a reservation by ID
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          examples:
            updated_reservation:
              value: 1
          required: true
          description: Reservation ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReservation'
            examples:
              update_reservation:
                value:
                  customerId: 10
                  customerName: Alice
                  type: room
                  referenceId: 102
                  date: "2025-09-02T10:00:00Z"
                  paid: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
              examples:
                updated_reservation:
                  value:
                    id: 1
                    customerId: 10
                    customerName: Alice
                    type: room
                    referenceId: 102
                    date: "2025-09-02T10:00:00Z"
                    paid: true
        "404":
          description: Reservation not found

    delete:
      description: Delete a reservation by ID
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          examples:
            cancelled:
              value: 1
          required: true
          description: Reservation ID
      responses:
        "204":
          description: Reservation deleted successfully
          content:
            text/plain:
              examples:
                cancelled:
                  value: "Reservation cancelled successfully"
        "404":
          description: Reservation not found

  /register:
    post:
      responses:
        "200":
          description: Registration success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                success:
                  value:
                    status: "success"
                    httpCode: 200
                    message: "Service registered successfully"
        "500":
          description: Registration error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                error:
                  value:
                    status: "error"
                    httpCode: 500
                    message: "Failed to register to Consul"
