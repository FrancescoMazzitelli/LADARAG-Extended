openapi: 3.0.2
info:
  title: Room API
  version: 1.0
  description: |-
    Room API for managing hotel rooms. This API allows to create, retrieve, update, and delete room information.
    It supports operations such as checking room availability, booking rooms, and managing room details.
  contact:
    name: Francesco Cosimo Mazzitelli

servers:
  - url: http://localhost:8585/rest/Room+API/1.0
    description: Mock server generated by Microcks

components:
  schemas:
    ResponseStatus:
      type: object
      properties:
        status:
          type: string
          description: Status of the operation
        httpCode:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Detailed message
      required:
        - status
        - httpCode
        - message
    Room:
      allOf:
        - $ref: '#/components/schemas/NewRoom'
        - properties:
            id:
              format: int64
              type: integer
              description: Unique identifier for the room
          required:
            - id
    NewRoom:
      properties:
        hotel:
          type: string
          description: Name of the hotel
        rating:
          type: integer
          format: int64
          description: Average rating of the room aggregated from the Rating service
        reserved:
          type: boolean
          description: Indicates if the room is reserved
        cleaned:
          type: boolean
          description: Indicates if the room is cleaned
        price:
          type: number
          format: float
          description: Price of the room
      required:
        - hotel
        - rating
        - reserved
        - cleaned
        - price

paths:
  /health:
    get:
      description: Health check
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
              examples:
                empty:
                  value: {}

  /room:
    get:
      description: Get the list of all the rooms registered to the system
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
              examples:
                rooms_list:
                  value:
                    - id: 1
                      hotel: Grand Hotel
                      rating: 5
                      reserved: true
                      cleaned: true
                      price: 120.0
                    - id: 2
                      hotel: Ocean View
                      rating: 4
                      reserved: false
                      cleaned: false
                      price: 140.5

    post:
      description: Register a new room to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRoom'
            examples:
              new_room:
                value:
                  hotel: Sunset Inn
                  rating: 3
                  reserved: false
                  cleaned: true
                  price: 99.99
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
              examples:
                created_room:
                  value: |-
                    {
                      "id": {{ randomInt(100, 200) }},
                      "hotel": "{{ request.body/hotel }}",
                      "reserved": {{ request.body/reserved }},
                      "cleaned": {{ request.body/cleaned }},
                      "price": {{ request.body/price }}
                    }

  /room/{id}:
    get:
      description: Get a specific room by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          examples:
            room_1:
              value: 1
            room_2:
              value: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
              examples:
                room_1:
                  value:
                    id: 1
                    rating: 5
                    hotel: Grand Hotel
                    reserved: true
                    cleaned: false
                    price: 120.0
                room_2:
                  value:
                    id: 2
                    rating: 4
                    hotel: Ocean View
                    reserved: false
                    cleaned: true
                    price: 140.5

    put:
      description: Update a specific room by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          examples:
            updated_room:
              value: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRoom'
            examples:
              update_room:
                value:
                  hotel: Grand Hotel
                  rating: 5
                  reserved: false
                  cleaned: true
                  price: 130.0
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
              examples:
                updated_room:
                  value:
                    id: 1
                    hotel: Grand Hotel
                    rating: 5
                    reserved: false
                    cleaned: true
                    price: 130.0

    delete:
      description: Delete a specific room by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          examples:
            room_delete:
              value: 1
          required: true
      responses:
        "204":
          description: Room deleted successfully
          content:
            text/plain:
              examples:
                room_delete:
                  value: "Room deleted successfully"

  /register:
    post:
      responses:
        "200":
          description: Registration success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                success:
                  value:
                    status: "success"
                    httpCode: 200
                    message: "Service registered successfully"
        "500":
          description: Registration error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                error:
                  value:
                    status: "error"
                    httpCode: 500
                    message: "Failed to register to Consul"