openapi: 3.0.2
info:
  title: Smart Sensors API
  version: 1.0
  description: |-
    Smart Sensors API for managing environmental sensor devices across the city. Compatible with the City Monitoring System, this service allows interaction with sensor references.
    Supports creation, lookup, update, and deletion of sensor units, including real-time environmental data tracking.
  contact:
    name: Smart City Development Team

servers:
  - url: http://localhost:8585/rest/Smart+Sensors+API/1.0
    description: Mock server generated by Microcks

components:
  schemas:
    ResponseStatus:
      type: object
      properties:
        status:
          type: string
        httpCode:
          type: integer
        message:
          type: string
      required:
        - status
        - httpCode
        - message

    Sensor:
      allOf:
        - $ref: '#/components/schemas/NewSensor'
        - properties:
            id:
              type: integer
              format: int64
              description: Unique identifier for the sensor device
          required:
            - id

    NewSensor:
      type: object
      properties:
        location:
          type: string
          description: Physical location of the sensor
        sensorType:
          type: string
          enum: [temperature, humidity, air_quality, noise, light]
          description: Type of environmental sensor
        lastReading:
          type: number
          format: float
          description: Most recent sensor reading value
        lastUpdated:
          type: string
          format: date-time
          description: Timestamp of the last reading update
        status:
          type: string
          enum: [active, inactive, maintenance]
          description: Current sensor status
      required:
        - location
        - sensorType
        - lastReading
        - lastUpdated
        - status

paths:
  /health:
    get:
      description: Health check
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
              examples:
                healthy:
                  value: {}

  /sensor:
    get:
      description: List all environmental sensors
      responses:
        "200":
          description: List of all sensor devices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sensor'
              examples:
                example_list:
                  value:
                    - id: 1
                      location: "City Center Park"
                      sensorType: temperature
                      lastReading: 23.5
                      lastUpdated: "2025-09-25T10:00:00Z"
                      status: active
                    - id: 2
                      location: "Main Street"
                      sensorType: air_quality
                      lastReading: 42.8
                      lastUpdated: "2025-09-25T09:45:00Z"
                      status: active

    post:
      description: Create a new sensor device entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSensor'
            examples:
              new_sensor:
                value:
                  location: "Riverside Walk"
                  sensorType: humidity
                  lastReading: 56.7
                  lastUpdated: "2025-09-25T11:15:00Z"
                  status: active
      responses:
        "201":
          description: Sensor device created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
              examples:
                created:
                  value:
                    id: 3
                    location: "Riverside Walk"
                    sensorType: humidity
                    lastReading: 56.7
                    lastUpdated: "2025-09-25T11:15:00Z"
                    status: active

  /sensor/{id}:
    get:
      description: Get a sensor device by its ID (used as reference in Monitoring System)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          examples:
            sensor_1:
              value: 1
      responses:
        "200":
          description: Sensor device details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
              examples:
                sensor_1:
                  value:
                    id: 1
                    location: "City Center Park"
                    sensorType: temperature
                    lastReading: 23.5
                    lastUpdated: "2025-09-25T10:00:00Z"
                    status: active
        "404":
          description: Sensor not found

    put:
      description: Update a sensor device by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          examples:
            updated:
              value: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSensor'
            examples:
              update:
                value:
                  location: "City Center Park"
                  sensorType: temperature
                  lastReading: 24.0
                  lastUpdated: "2025-09-25T12:00:00Z"
                  status: active
      responses:
        "200":
          description: Sensor device updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
              examples:
                updated:
                  value:
                    id: 1
                    location: "City Center Park"
                    sensorType: temperature
                    lastReading: 24.0
                    lastUpdated: "2025-09-25T12:00:00Z"
                    status: active
        "404":
          description: Sensor not found

    delete:
      description: Delete a sensor device by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          examples:
            deleted:
              value: 1
      responses:
        "204":
          description: Deleted successfully
          content:
            text/plain:
              examples:
                deleted:
                  value: "Sensor device deleted"
        "404":
          description: Sensor not found

  /register:
    post:
      description: Register this service to the discovery system
      responses:
        "200":
          description: Registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                ok:
                  value:
                    status: "success"
                    httpCode: 200
                    message: "Service registered"
        "500":
          description: Registration failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                fail:
                  value:
                    status: "error"
                    httpCode: 500
                    message: "Unable to register to Consul"
