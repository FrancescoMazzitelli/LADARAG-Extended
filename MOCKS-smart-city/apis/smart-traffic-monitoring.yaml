openapi: 3.0.2
info:
  title: Smart Traffic Monitoring API
  version: 1.0
  description: |-
    Smart Traffic Monitoring API for managing traffic sensors and monitoring points across the city. Compatible with the City Traffic Control System, this service allows interaction with traffic sensor references.
    Supports creation, lookup, update, and deletion of traffic monitoring points including real-time status and congestion levels.
  contact:
    name: Smart City Development Team

servers:
  - url: http://localhost:8585/rest/Smart+Traffic+Monitoring+API/1.0
    description: Mock server generated by Microcks

components:
  schemas:
    ResponseStatus:
      type: object
      properties:
        status:
          type: string
        httpCode:
          type: integer
        message:
          type: string
      required:
        - status
        - httpCode
        - message

    TrafficSensor:
      allOf:
        - $ref: '#/components/schemas/NewTrafficSensor'
        - properties:
            id:
              type: integer
              format: int64
              description: Unique identifier for the traffic sensor
          required:
            - id

    NewTrafficSensor:
      type: object
      properties:
        location:
          type: string
          description: Physical location of the traffic sensor
        active:
          type: boolean
          description: Whether the sensor is currently active
        congestionLevel:
          type: string
          enum: [low, medium, high]
          description: Current congestion level detected
        lastUpdated:
          type: string
          format: date-time
          description: Timestamp of the last sensor update
      required:
        - location
        - active
        - congestionLevel
        - lastUpdated

paths:
  /health:
    get:
      description: Health check
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
              examples:
                healthy:
                  value: {}

  /traffic-sensor:
    get:
      description: List all traffic sensors
      responses:
        "200":
          description: List of all traffic sensors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrafficSensor'
              examples:
                example_list:
                  value:
                    - id: 1
                      location: "Main St & 5th Ave"
                      active: true
                      congestionLevel: medium
                      lastUpdated: "2025-09-25T10:15:30Z"
                    - id: 2
                      location: "Broadway & 7th Ave"
                      active: false
                      congestionLevel: low
                      lastUpdated: "2025-09-25T09:45:00Z"

    post:
      description: Create a new traffic sensor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTrafficSensor'
            examples:
              new_sensor:
                value:
                  location: "Elm St & 3rd Ave"
                  active: true
                  congestionLevel: low
                  lastUpdated: "2025-09-25T10:00:00Z"
      responses:
        "201":
          description: Traffic sensor created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrafficSensor'
              examples:
                created:
                  value:
                    id: 3
                    location: "Elm St & 3rd Ave"
                    active: true
                    congestionLevel: low
                    lastUpdated: "2025-09-25T10:00:00Z"

  /traffic-sensor/{id}:
    get:
      description: Get a traffic sensor by its ID (used as reference in City Traffic Control System)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          examples:
            sensor_1:
              value: 1
      responses:
        "200":
          description: Traffic sensor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrafficSensor'
              examples:
                sensor_1:
                  value:
                    id: 1
                    location: "Main St & 5th Ave"
                    active: true
                    congestionLevel: medium
                    lastUpdated: "2025-09-25T10:15:30Z"
        "404":
          description: Traffic sensor not found

    put:
      description: Update a traffic sensor by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          examples:
            updated:
              value: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTrafficSensor'
            examples:
              update:
                value:
                  location: "Main St & 5th Ave"
                  active: false
                  congestionLevel: high
                  lastUpdated: "2025-09-25T11:00:00Z"
      responses:
        "200":
          description: Traffic sensor updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrafficSensor'
              examples:
                updated:
                  value:
                    id: 1
                    location: "Main St & 5th Ave"
                    active: false
                    congestionLevel: high
                    lastUpdated: "2025-09-25T11:00:00Z"
        "404":
          description: Traffic sensor not found

    delete:
      description: Delete a traffic sensor by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          examples:
            deleted:
              value: 1
      responses:
        "204":
          description: Deleted successfully
          content:
            text/plain:
              examples:
                deleted:
                  value: "Traffic sensor deleted"
        "404":
          description: Traffic sensor not found

  /register:
    post:
      description: Register this service to the discovery system
      responses:
        "200":
          description: Registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                ok:
                  value:
                    status: "success"
                    httpCode: 200
                    message: "Service registered"
        "500":
          description: Registration failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                fail:
                  value:
                    status: "error"
                    httpCode: 500
                    message: "Unable to register to Consul"
