services:
  registry:
    image: hashicorp/consul:latest
    restart: always
    container_name: registry
    command: agent -dev -client=0.0.0.0
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 10s
      timeout: 5s
      retries: 5

  mock-server:
    image: quay.io/microcks/microcks-uber:latest
    container_name: mock-server
    ports:
      - "8585:8080"
    volumes:
      - mock-volume:/data
    environment:
      - MICROCKS_CONSUL_URL=http://registry:8500
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 30
    depends_on:
      registry:
        condition: service_healthy

  mock-deployer:
    image: quay.io/microcks/microcks-cli:latest
    container_name: mock-deployer
    depends_on:
      mock-server:
        condition: service_healthy
    volumes:
      - ./MOCKS-smart-city/apis:/apis
      - ./MOCKS-smart-city/scripts:/scripts
      - ./deploy.sh:/deploy.sh:ro
      - ./register.sh:/register.sh:ro
    entrypoint: sh
    command:
      - -c
      - |
        set -e
        echo "Downloading jq..."
        curl -L -o /tmp/jq https://github.com/stedolan/jq/releases/latest/download/jq-linux64
        chmod +x /tmp/jq
        /tmp/jq --version
        echo "jq installed successfully"
        /deploy.sh
        echo "Waiting 15 seconds before running register.sh..."
        sleep 15
        /register.sh
    environment:
      - MICROCKS_HOST=mock-server
      - MICROCKS_PORT=8080
      - MICROCKS_USER=admin
      - MICROCKS_PASS=admin

  catalog:
    image: mongo:8.0.6
    container_name: catalog
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin

  catalog-gui:
    image: mongo-express:1.0.2-20-alpine3.19
    container_name: catalog-gui
    ports:
      - "27018:8081"
    environment:
      - ME_CONFIG_MONGODB_URL=mongodb://admin:admin@catalog:27017/
      - ME_CONFIG_BASICAUTH_ENABLED=true
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - catalog
    restart: unless-stopped

  catalog-gateway:
    build:
      context: ./mongo-gateway
      dockerfile: Dockerfile
    container_name: catalog-gateway
    ports:
      - "5000:5000"
    environment:
      - MONGO_USER=admin
      - MONGO_PASS=admin
      - MONGO_HOST=catalog
      - MONGO_PORT=27017
      - MONGO_DB=microcks
    depends_on:
      - catalog

  control-unit:
    build:
      context: ./control-unit
      dockerfile: Dockerfile
    container_name: control-unit
    ports:
      - "5500:5500"
    environment:
      - REGISTRY_URL=http://registry:8500
      - CATALOG_URL=http://catalog-gateway:5000
      - OLLAMA_API_URL=http://192.168.250.40:15888
      - MOCK_SERVER_URL=http://mock-server:8080
    depends_on:
      mock-deployer:
        condition: service_completed_successfully
      registry:
        condition: service_healthy

  healthcheck-catalog:
    image: redis/redis-stack:7.2.0-v19
    container_name: healthcheck-catalog
    ports:
      - "6379:6379"
      - "6380:8001"
    volumes:
      - redis-data:/data
    restart: unless-stopped

  healthcheck-service:
    build:
      context: ./redis-connector-quarkus
      dockerfile: Dockerfile
    container_name: healthcheck-service
    ports:
      - "5600:5600"
    environment:
      - REDIS_URL=redis://healthcheck-catalog:6379
    depends_on:
      healthcheck-catalog:
        condition: service_started
      registry:
        condition: service_healthy
      mock-deployer:
        condition: service_completed_successfully
      mock-server:
        condition: service_healthy
      catalog-gateway:
        condition: service_started
      
  api-importer:
    build:
      context: ./api-importer
      dockerfile: Dockerfile
    container_name: api-importer
    ports:
      - "7500:7500"
    environment:
      - CONSUL_HOST=registry
      - CONSUL_PORT=8500
      - GATEWAY_HOST=catalog-gateway
      - GATEWAY_PORT=5000
      - HEALTHCHECK_SERVICE_HOST=healthcheck-service
      - HEALTHCHECK_SERVICE_PORT=5600
    depends_on:
      registry:
        condition: service_healthy
      catalog-gateway:
        condition: service_started
      healthcheck-service:
        condition: service_started

volumes:
  mongo-data:
  mock-volume:
  redis-data:
